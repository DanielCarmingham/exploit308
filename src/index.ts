import http from "http";
import url from "url";
import path from "path";
import crypto from "crypto";

const host = 'localhost';
const port = 8000;

var userCount = 0;
const fingerprints = new Map();

const requestListener = function (req: http.IncomingMessage, res: http.ServerResponse) {
    const parsedUrl = url.parse(req.url!);    
    const pathname = parsedUrl.pathname;

    console.log(`Handling request:  ${pathname}`);

    // --- handler for /
    if (pathname === "/") {
        res.writeHead(200);
        res.end(`
            <html>
            <head>
                <link rel="stylesheet" href="/nofingerprint">
            </head>
            <body>
            Here ya go!
            </body>
            </html>
        `);
    }
    else 
    // --- handler for /nofingerprint
    if (pathname?.startsWith("/nofingerprint")) {

        // create a new fingerprint
        const newFingerprint = crypto.randomUUID();
        fingerprints.set(newFingerprint, userCount);
        console.log(`Created fingerprint ${newFingerprint} for user ${userCount}`);
        
        // increment the user count
        userCount++;

        // return a permanent redirect to the new fingerprinted URL
        res.writeHead(308, {
            "Location": `/fingerprint/${newFingerprint}`
        });
        res.end();
    }
    else
    // --- handler for /nofingerprint/____
    if (pathname?.startsWith("/fingerprint")) {

        // parse out the fingerprint from the URL
        const fingerprint = path.basename(pathname);

        // look up the user number  by fingerprint
        const userNumber = fingerprints.get(fingerprint);
        console.log(`Retrieved fingerprint ${fingerprint} for user ${userNumber}`);

        // return some dummy css that includes the fingerprint and user number
        res.writeHead(200, { "Content-Type": "text/css" });
        res.end(`#fingerprint-${fingerprint}--user-${userNumber} { }`);
    }
    else {
        // no idea, return 404
        res.writeHead(404);
        res.end();
    }
};


const server = http.createServer(requestListener);
server.listen(port, host, () => {
    console.log(`Server is running on http://${host}:${port}`);
});